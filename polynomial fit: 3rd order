#!/usr/bin/python
import numpy as np
import matplotlib.pyplot as plt
import datetime


# Functions 
def rmse(predictions, targets):
    return np.sqrt(((predictions - targets) ** 2).mean())

def seasonal_mort_coeffs(day,mortrate):
    return np.polyfit(day,mortrate,3)

def seasonal_mort_fit(day,coeffs):
    return (coeffs[0]*pow(day,3)+coeffs[1]*pow(day,2)+coeffs[2]*day+coeffs[3])


def fact_seasonal_mort_fit(day,year,annual_mean_mortrate,mean_mortrate,coeffs,flag):
    result=np.zeros(shape=len(day))

    mort_trend=np.polyfit(years,annual_mean_mortrate/mean_mortrate,1)

    year_factor=np.zeros(shape=8)
    
    if flag:
      year_factor[0]=1/0.94 #2007
      year_factor[1]=1/0.95 #2008
      year_factor[2]=1/0.99 #2009
      year_factor[3]=1/1.01 #2010
      year_factor[4]=1/1.10 #2011
      year_factor[5]=1/1.04 #2012
      year_factor[6]=1/1.06 #2013
      year_factor[7]=1/1.08 #2014
    else:
      year_factor[0]=annual_mean_mortrate[0]/mean_mortrate
      year_factor[1]=annual_mean_mortrate[1]/mean_mortrate
      year_factor[2]=annual_mean_mortrate[2]/mean_mortrate
      year_factor[3]=annual_mean_mortrate[3]/mean_mortrate
      year_factor[4]=annual_mean_mortrate[4]/mean_mortrate
      year_factor[5]=annual_mean_mortrate[5]/mean_mortrate
      year_factor[6]=6.0*mort_trend[0]+mort_trend[1]
      year_factor[7]=7.0*mort_trend[0]+mort_trend[1]

    it=np.nditer(day,flags=['f_index'])
    while not it.finished:
      this_year=int(year[it.index])-2007

      result[it.index]=year_factor[this_year]*(coeffs[0]*pow(it[0],3)+coeffs[1]*pow(it[0],2)+coeffs[2]*it[0]+coeffs[3])
      
      it.iternext()
      
    return result


# Load data
inputfile='data/train.csv'

data = np.genfromtxt(fname=inputfile,delimiter=',',usecols=[0,1,2,3,4,5,6,7,8],dtype=None)

#!!! Create empty arrays for data !!!
nrows    = len(data)
ids      = np.zeros(shape=(nrows))
region   = np.zeros(shape=(nrows))
mortrate = np.zeros(shape=(nrows))
day      = np.zeros(shape=(nrows))
year     = np.zeros(shape=(nrows))

counter_mortrate = np.zeros(shape=6)
sum_mortrate     = np.zeros(shape=6)
years            = np.zeros(shape=6)

sum_temp   = np.zeros(shape=366)
count_temp = np.zeros(shape=366)

counter=0
for line in data:

# Copy IDs into array
  ids[counter]=line[0]

# Convert region into integer and copy into array
  tmpstring=line[1]
  region[counter]=tmpstring[4:]

# Convert date to day of year, and year, and copy these to arrays
  tmpdate=line[2]
  tmpday=datetime.datetime.strptime(tmpdate,'%Y-%m-%d')
  yearstart=datetime.datetime.strptime(str(tmpday.year)+'-01-01','%Y-%m-%d')
  diff=tmpday-yearstart
  daynum=diff.days
  day[counter]=daynum
  year[counter]=tmpday.year

# Copy mortality rate to array
  mortrate[counter]=np.nan_to_num(line[3])


# Calculate annual average mortality
  this_year=int(year[counter])-2007
  sum_mortrate[this_year]=sum_mortrate[this_year]+mortrate[counter]
  counter_mortrate[this_year]=counter_mortrate[this_year]+1
  years[this_year]=year[counter]-2007.0
  
  counter=counter+1
  

#Calculate mean mortality for each year
annual_mean_mortrate=sum_mortrate/counter_mortrate

#Calculate overall mean mortality
mean_mortrate=np.mean(mortrate)


#!!!!!! Model - polynomial fit of mortality rate to day of the year
seasonal_mort_coeffs=seasonal_mort_coeffs(day,mortrate)
seasonal_mort_train=seasonal_mort_fit(day,seasonal_mort_coeffs)
print 'Polyfit model: Traning RMSE error:                                                     ',rmse(seasonal_mort_train, mortrate)



#!!!!!! Model - same as previous model, but using factor to vary mortality for each year
factored_seasonal_mort_train=fact_seasonal_mort_fit(day,year,annual_mean_mortrate,mean_mortrate,seasonal_mort_coeffs,1)
print 'Polyfit model with annual factors entered manually: Traning RMSE error:                ',rmse(factored_seasonal_mort_train, mortrate)

#!!!!!! Model - same as previous model, but using linear fit to annual trend to factor to vary mortality for each year
factored_seasonal_mort_train=fact_seasonal_mort_fit(day,year,annual_mean_mortrate,mean_mortrate,seasonal_mort_coeffs,0)
print 'Polyfit model with annual factors from linear fit to annual trend: Traning RMSE error: ',rmse(factored_seasonal_mort_train, mortrate)


#!!!!!!! Create results for test data !!!!!!!!

# Load test data
testfile='data/test.csv'

testdata=np.genfromtxt(fname=testfile,delimiter=',',usecols=[0,1,2,3,4,5,6,7],dtype=None)
testnrows=len(testdata)

testids=np.zeros(shape=(testnrows))
testday=np.zeros(shape=(testnrows))
testyear=np.zeros(shape=(testnrows))
counter=0

for line in testdata:

  testids[counter]=line[0]

  tmpdate=line[2]

  tmpday=datetime.datetime.strptime(tmpdate,'%Y-%m-%d')
  yearstart=datetime.datetime.strptime(str(tmpday.year)+'-01-01','%Y-%m-%d')
  diff=tmpday-yearstart
  daynum=diff.days
  testday[counter]=daynum
  testyear[counter]=tmpday.year
  
  counter=counter+1


# Apply first model to test data
seasonal_mort_test=seasonal_mort_fit(testday,seasonal_mort_coeffs)
d = np.column_stack((testids, seasonal_mort_test ))
np.savetxt('test_seasonal_mort.csv',d,delimiter=',',fmt='%i,%f')


#Apply second model to test data
fact_seasonal_mort_test=fact_seasonal_mort_fit(testday,testyear,annual_mean_mortrate,mean_mortrate,seasonal_mort_coeffs,1)
d = np.column_stack((testids, fact_seasonal_mort_test ))
np.savetxt('test_fact_seasonal_mort.csv',d,delimiter=',',fmt='%i,%f')

#Apply third model to test data
fact_seasonal_mort_test=fact_seasonal_mort_fit(testday,testyear,annual_mean_mortrate,mean_mortrate,seasonal_mort_coeffs,0)
d = np.column_stack((testids, fact_seasonal_mort_test ))
np.savetxt('test_linfact_seasonal_mort.csv',d,delimiter=',',fmt='%i,%f')



